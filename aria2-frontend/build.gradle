import org.apache.tools.ant.taskdefs.condition.Os

tasks.register("cleanInstallDependencies") {
  description = "Cleans the aria2-frontend project dependencies"

  println "Cleaning up dependencies for aria2-frontend..."

  file("./node_modules").deleteDir()
  file("./package-lock.json").delete()

  println "Successfully cleaned up the dependencies for aria2-frontend"
}

tasks.register("build") {
  dependsOn(":aria2-backend:build")
  description = "Builds the aria2-backend project"
  mustRunAfter(":aria2-backend:build")
  def buildCmd = "npm run buildProd"
  exec {
    if(Os.isFamily(Os.FAMILY_WINDOWS)) {
      commandLine "cmd.exe", "/c", "${buildCmd}"
    } else if(Os.isFamily(Os.FAMILY_UNIX)) {
      commandLine "/bin/bash", "-c", "${buildCmd}"
    } else {
      throw new GradleException("Only ${Os.FAMILY_WINDOWS} and ${Os.FAMILY_UNIX} platforms are supported. Detected platform, ${}")
    }
  }
}

tasks.register("test") {
  println "Os : ${Os.isFamily(Os.FAMILY_WINDOWS)}"
}

npmInstall {
  args = ["--force"]
}

task startDevServer(type: Exec) {
  def startDevServerCmd = "npm start"
  if(Os.isFamily(Os.FAMILY_WINDOWS)) {
    commandLine "cmd.exe", "/c", "${startDevServerCmd}"
  } else if(Os.isFamily(Os.FAMILY_UNIX)) {
    commandLine "/bin/bash", "-c", "${startDevServerCmd}"
  } else {
    throw new GradleException("Only ${Os.FAMILY_WINDOWS} and ${Os.FAMILY_UNIX} platforms are supported. Detected platform, ${}")
  }
}

npmInstall.mustRunAfter "cleanInstallDependencies"
